using PyPlot
using LightGraphs
using StatsBase

#change the graphs and probabilities to replicate figure 3(e and i) and compare them to make sure it checks out

#Not entirely necessary for this section of the program--for the Prisoner's Dilemma game Individuals play in the full simulation, C is the cost of cooperation and B is the benefit if the other Individual cooperates
C=1
B=4

mutable struct Individual #the type for each individual
    strategy::String #the individual's strategy (from the strategies array)
    payoff::Int #the individual's total payoff across all games
    moves #an array that stores all the individual's moves in each time step
    alwaysC::Bool #true if the individual always cooperates (its strategy is ALLC)
    alwaysD::Bool #true if the individual always defects (its strategy is ALLD)
    function Individual(strat, pay)
        if(strat=="rand") #pick a random strategy and use the provided payoff
            new(strategies[ceil(Integer, (rand()*(STRATSSIZE)))], pay, [], false, false)
        else
            new(strat, pay, [], false, false)
        end
    end
end

#Some basic setup variables
population=Individual[]
populationsize=15
numberoftimesteps=4000
currtimestep=0
mutationrate=0.001
iterations=50 #the number of games played in each time step

#the array of all possible strategies in the games
strategies=["ALLC", "ALLD", "TIT4TAT", "CAUTIOUSTIT", "ALTERNATE", "RANDOM"]
STRATSSIZE=6

#These are probabilities for replication
pb=1 #likelihood that a newborn connects to its mother
pn=0.85 #likelihood that a newborn connects to any of its mother's connections
pr=0.017 #likelihood that a newborn connects to all other nodes
relationships=zeros(Integer,populationsize,populationsize) #1 if individuals are linked

function computemove(self::Individual, opponent::Individual, iter::Integer)
    #these are just shortcuts to skip some if-statements
    if(self.alwaysD==true)
        return "D"
    end
    if(self.alwaysC==true)
        return "C"
    end

    #the move that will be returned
    action="C"

    #ALLD will shortcut via the if-statements above--always defects
    if(self.strategy=="ALLD")
        self.alwaysD=true
        action="D"
    end

    #ALLC will also shortcut--it always cooperates
    if(self.strategy=="ALLC")
        self.alwaysC=true
    end

    if(self.strategy=="TIT4TAT") #starts by cooperating then repeats the opponent's previous move
        if(iter>1)
          action=opponent.moves[iter-1]
        end
    end

    if(self.strategy=="CAUTIOUSTIT")#Same as Tit for Tat, but starts by defecting
        action="D"
        if(iter>1)
          action=opponent.moves[iter-1]
        end
    end

    if(self.strategy=="ALTERNATE")#This strategy starts with cooperation and switches every time step
        if(iter>1)
            if(self.moves[iter-1]=="C")
                action=="D"
            end
        end
    end

    if(self.strategy=="RANDOM")#Decides its move via a coinflip
        if(rand()>0.5)
            action=="D"
        end
    end
    return action
end

function addtopayoff(self::Individual, gamepay::Integer)
    self.payoff+=gamepay
end
function mutate(self::Individual) #changes strategy randomly
    self.strategy=strategies[floor(Integer,(rand()*(STRATSSIZE)+1))]
end
function findfitness(self::Individual)
    return self.payoff
end
function clearmoves(self::Individual) #clears the moves array
    if(length(self.moves)==iterations) #If an individual has gone through every iteration, it just replaces all of the moves with None
    for i=1:iterations
        self.moves[i]="None"
    end
else #otherwise, it replaces all the existing moves with None and then appends None until the moves array is the right size
    for i=1:length(self.moves)
        self.moves[i]="None"
    end
    for i=1:(iterations-length(self.moves))
        push!(self.moves,"None")
    end
  end
end

function initsim() #resets the simulation
    global population=[] #reset the population array
    global relationships=zeros(Integer,populationsize,populationsize) #reset relationships
    for i=1:populationsize #reset the population
        guy=Individual("rand",0)
        clearmoves(guy)
        push!(population, guy)
    end
    for i=1:populationsize
        for j=i:populationsize #this hits everything
            if(j!=i)
                if(rand()<pr)
                    relationships[i,j]=1
                    relationships[j,i]=1
                end
            end
        end
    end
end

function generationrun() #for each generation
    death=ceil(Integer,(rand()*populationsize)) #random individual dies
    mother=ceil(Integer,(rand()*populationsize)) #random individual reproduces
    while mother==death #reselect the reproducer if they're the same
        mother=ceil(Integer,(rand()*populationsize))
    end
    offspring=Individual("rand",0)#create a new individual (from the mother reproducing)--in the final version, this will be likely to be the mother's strategy
    global relationships[:, death]=0 #disconnect every individual from death--note that offspring will take death's place in the array
    relationships[death, :]=0
    for i=1:populationsize
        relationships[death,i]=0 #disconnect individual i from death just in case the first loop failed
        if(relationships[mother,i]==1 && i!=death && rand()<pn) #if a random number is below pn and i is connected to mother, connect offspring to i
            relationships[death,i]=1
            relationships[i,death]=1
        end
        if(i!=death && relationships[mother,i]==0 && rand()<pr) #if a random number is below pr and i isn't connected to mother, connect offspring to i
            relationships[death,i]=1
            relationships[i,death]=1
        end
        if(i==mother && rand()<pb) #if a random number is below pb (which is always right now, as pb is 1) and i is mother, connect offspring to mother
            relationships[death,i]=1
            relationships[i,death]=1
        end
    end
    global population[death]=offspring #replace death with offspring
end

#the two arrays store the data from each run of the simulation
simruns=500
degreedistributiondata=zeros(simruns, populationsize)
clusteringcoefdata=zeros(simruns,populationsize+1)

#running the simulation simruns times
for j=1:simruns
    initsim() #reset the simulation, or begin it if it hasn't started yet
    for i=1:numberoftimesteps #run the specified number of generations
        generationrun()
    end
    degrees=zeros(populationsize) #number of individuals with a degree equal to the index
    clusco=zeros(populationsize+1) #number of individuals w. a clustering coefficient equal to the index

    g=Graph(relationships) #make a graph (a network) out of relationships

    #make an array of the degree of each individual in the graph
    deg=[]
    for v in vertices(g)
        push!(deg,length(neighbors(g,v)))
    end
    #a similar array for clustering coefficients
    localcoefs=local_clustering_coefficient(g,vertices(g))
    for i=1:populationsize #make a count of the number of individuals with each degree/clustering coefficient
      degrees[deg[i]+1]+=1#index= given degree, element= number with that degree
      clusco[ceil(Integer,localcoefs[i]*populationsize)+1]+=1
    end
    popleft=populationsize
    for i in eachindex(degreedistributiondata[1,:])
      popleft-=degrees[i]
      degrees[i]=popleft/populationsize
    end
    popleft=populationsize
    for i in eachindex(clusteringcoefdata[1,:])
      popleft-= clusco[i]
      clusco[i]=popleft/populationsize
    end
    #add the degree and clusco data from this trial to the overall array
    global degreedistributiondata[j,:]=degrees[:]
    global clusteringcoefdata[j,:]=clusco[:]
end

#create the graph dimensions(a probability curve)
xaxisdd=0:length(degreedistributiondata[1,:])
xaxiscc=0:1/(populationsize+1):1

#create the graph data arrays
yaxisdd=zeros(populationsize+1)
yaxiscc=zeros(populationsize+2)
for j=1:populationsize
  yaxisdd[j+1]=mean(degreedistributiondata[:,j])
end
for j=1:populationsize+1
  yaxiscc[j+1]=mean(clusteringcoefdata[:,j])
end

#make two subplots (one for degree and one for clustering coefficient)
fig,ax=subplots(nrows=2,squeeze=false)

#find various statistical values for degree and then for clusco
ddhigh475=zeros(populationsize+1)
ddlow475=zeros(populationsize+1)
cchigh475=zeros(populationsize+2)
cclow475=zeros(populationsize+2)
for j=1:populationsize
  ddhigh475[j+1]=percentile(degreedistributiondata[:,j],97.5)
  ddlow475[j+1]=percentile(degreedistributiondata[:,j],2.5)
end
for j=1:populationsize+1
  cchigh475[j+1]=percentile(clusteringcoefdata[:,j],97.5)
  cclow475[j+1]=percentile(clusteringcoefdata[:,j],2.5)
end

#plot the degree curve
ax[1,1][:set_xlim]([0,32])
ax[1,1][:plot](xaxisdd,yaxisdd,color="green")
ax[1,1][:fill_between](x=xaxisdd,y1=yaxisdd,y2=ddhigh475,color="blue")
ax[1,1][:fill_between](x=xaxisdd,y1=yaxisdd,y2=ddlow475,color="blue")

#plot the clusco curve
ax[2,1][:set_ylim]([0,1])
ax[2,1][:plot](xaxiscc,yaxiscc,color="green")
ax[2,1][:fill_between](x=xaxiscc,y1=yaxiscc,y2=cchigh475,color="#FF6666")
ax[2,1][:fill_between](x=xaxiscc,y1=yaxiscc,y2=cclow475,color="#FF6666")

show() #display the graphs
